class MyHashMap:
    def __init__(self):
        self.hm=collections.defaultdict(int)        
    def put(self, key: int, value: int) -> None:
        self.hm[key]=value        
    def get(self, key: int) -> int:
        if key in self.hm:
            return self.hm[key]
        else:
            return -1        
    def remove(self, key: int) -> None:
        if key in self.hm:
            del self.hm[key]

        
-------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def isValidSudoku(self, b: List[List[str]]) -> bool:
        row=collections.defaultdict(set)
        col=collections.defaultdict(set)
        square=collections.defaultdict(set)
        for i in range(9):
            for j in range(9):
                if b[i][j]=='.':
                    continue
                if(b[i][j] in row[i]) or (b[i][j] in col[j]) or (b[i][j] in square[(i//3 , j//3)]):
                    return 0
                row[i].add(b[i][j])
                col[j].add(b[i][j])
                square[(i//3 , j//3)].add(b[i][j])
        return 1
-------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        l=[]
        le=len(strs)
        nstr=[]
        cntl=[]
        for c,i in enumerate(strs):
            nstr.append(''.join(sorted(i)))
        print(nstr)
        i=0
        while(i<le):
            nl=[]
            f=0
            if i in cntl:
                i+=1
                continue
            for j in range(i,le):
                if nstr[i]==nstr[j]:
                    cntl.append(j)
                    nl.append(strs[j])
                    f=1
            if f==1:
                l.append(nl)
            i+=1

        return l
--------------------------------------------------------------------------------------------------------------------------------
from collections import Counter
class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        c=Counter(nums)
        l=[]
        cl=c.most_common()
        print(cl)
        for i in range(k):
            print(type(i))
            l.append(cl[i][0])
        return l
--------------------------------------------------------------------------------------------------------------------------------
from collections import defaultdict
import random
class RandomizedSet:
    def __init__(self):
        def def_val():
            return 0
        self.d=defaultdict(def_val)
    def insert(self, val: int) -> bool:
        if self.d[val]==0:
            self.d[val]=1
            # self.d[val]+=1
            return 1
        else:
            return 0
    def remove(self, val: int) -> bool:
        # print(d)
        if self.d.get(val):
            del self.d[val]
            # print(self.d)
            return 1 
        else:
            return 0       
    def getRandom(self) -> int:
        # print(self.d)
        keys=list(self.d.keys())
        # print(keys)
        random_val = random.choice(keys)
        return random_val
        
-----------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def firstUniqChar(self, s: str) -> int:
        def def_val():
            return 0
        l=len(s)
        d=defaultdict(def_val)
        for i in s:
            d[i]+=1
        for j in range(l):
            if d[s[j]]==1:
                return j
        return -1
------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        scount,pcount = {},{}
        lp=len(p)
        ls=len(s)
        res=[]
        if lp>ls:
            return []
        for i in range(lp):
            pcount[p[i]] = 1 + pcount.get(p[i],0)
            scount[s[i]] = 1 + scount.get(s[i],0)
        if pcount==scount:
            res=[0]
        print(pcount,scount,res)
        l=0
        for r in range(lp,ls):
            scount[s[r]] = 1 + scount.get(s[r],0)
            scount[s[l]]-=1
            if scount[s[l]]==0:
                scount.pop(s[l])
            l+=1
            if pcount==scount:
                res.append(l)

        return res
---------------------------------------------------------------------------------------------------------------------------------------
class Solution(object):
    def frequencySort(self, s):
        d1=sorted(d,key=lambda x:d[x])
---------------------------------------------------------------------------------------------------------------------------------------
class Solution:
    def findMaxLength(self, nums: List[int]) -> int:
        def def_val():
            return -1
        d=defaultdict(def_val)
        cnt,ma=0,0
        l=len(nums)
        for i in range(l):
            if nums[i]==0:
                cnt-=1
            if nums[i]==1:
                cnt+=1
            if cnt==0:
                ma=max(ma,i+1)
                d[cnt]=i
            if d[cnt]==-1:
                d[cnt]=i 
            elif d[cnt]!=-1:
                ma=max(ma,i-d[cnt])
        return ma

--------------------------------------------------------------------------------------------------------------------------------------
class Solution {
    public int subarraySum(int[] nums, int k) {
        int l=nums.length,c=0;
        for(int i=0;i<l;i++){
            int s=0;
            for(int j=i;j<l;j++){
                s+=nums[j];
                if(s==k) c++;
            }
        }
        return c;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------
from collections import defaultdict
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        def def_val(): return -1
        h=defaultdict(def_val)
        le=len(s) 
        left,right,res=0,0,0
        while(right<le):
            if h[s[right]]==-1:
                h[s[right]]=right
                res = max(res,right-left+1) 
                right+=1
            else:
                if h[s[right]]>=left and h[s[right]]<=right:
                    left = h[s[right]]+1
                    h[s[right]] =right
                    res = max(res,right-left+1)
                    right+=1
                else:
                    h[s[right]]=right
                    res=max(res,right-left+1)
                    right+=1    
        return res

 -------------------------------------------------------------------------------------------------------------------------------------------