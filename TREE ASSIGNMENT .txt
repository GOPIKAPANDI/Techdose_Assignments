TREE ASSIGNMENT :
---------------------
1.Lowest-common-ancestor-of-a-binary-tree
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        if not root or root == p or root == q:
            return root
        
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        
        if left and right:
            return root
        elif left:
            return left
        else:
            return right

2.Binary-tree-level-order-traversal
from collections import deque
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]: 
        if not root: return [] 
        ans=[] 
        q=deque([root])  
        while q:
            lis=[]
            le=len(q)  
            for i in range(le):
                node = q.popleft() 
                lis.append(node.val) 
                if node.left:
                    q.append(node.left)
                if node.right: 
                    q.append(node.right) 
            ans.append(lis) 
        return ans
